#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/op-codes.fc";
#include "imports/jetton-utils-2.fc"; 
#include "imports/swap_utils.fc";
#include "imports/messages.fc";
#include "imports/lm_utils.fc";

int min_tons_for_storage() asm "10000000 PUSHINT"; ;; 0.01 TON
int gas_consumption() asm "15000000 PUSHINT"; ;; 0.015 TON

global slice storage::fund_addr;
global slice storage::owner_addr;
const STONFI_ROUTER = "kQB3ncyBUTjZUA5EnFKR5_EnOMI9V1tTEAAPaiU71gc4Tp6n"a;
global cell storage::liquidity_manager_code;
global cell storage::jettons_data;


() load_data() impure {
  slice ds = get_data().begin_parse();
  
  storage::fund_addr = ds~load_msg_addr();
  storage::owner_addr = ds~load_msg_addr();
  storage::jettons_data = ds~load_dict();
  storage::liquidity_manager_code = ds~load_ref();
}

() save_data() impure inline {
  set_data(pack_jetton_wallet_data_2(storage::owner_addr, storage::fund_addr, storage::jettons_data, storage::liquidity_manager_code));
}

{-
  transfer query_id:uint64 amount:(VarUInteger 16) destination:MsgAddress
           response_destination:MsgAddress custom_payload:(Maybe ^Cell)
           forward_ton_amount:(VarUInteger 16) forward_payload:(Either Cell ^Cell)
           = InternalMsgBody;
  internal_transfer  query_id:uint64 amount:(VarUInteger 16) from:MsgAddress
                     response_address:MsgAddress
                     forward_ton_amount:(VarUInteger 16)
                     forward_payload:(Either Cell ^Cell) 
                     = InternalMsgBody;
-}

() send_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
  int query_id = in_msg_body~load_uint(64);
  int inaccurate_jetton_amount = in_msg_body~load_coins();
  slice to_owner_address = in_msg_body~load_msg_addr();
  force_chain(to_owner_address);
  load_data();

  throw_unless(705, equal_slices(storage::owner_addr, sender_address));

  cell state_init = calculate_jetton_wallet_state_init_2(storage::fund_addr, to_owner_address, storage::liquidity_manager_code, storage::liquidity_manager_code);
  slice to_wallet_address = calculate_jetton_wallet_address_2(state_init);
  slice response_address = in_msg_body~load_msg_addr();
  cell custom_payload = in_msg_body~load_dict();

  (int addr, slice jetton_data, int flag) = custom_payload.udict_get_min?(256);
  while (flag) {
    int jetton_amount = jetton_data~load_coins();
    int coef = jetton_data~load_uint(8);
    (slice actual_jetton_data, int flag_1) = storage::jettons_data.udict_get?(256, addr);
    throw_unless(303, flag_1);
    int actual_jetton_balance = actual_jetton_data~load_coins();
    actual_jetton_balance -= jetton_amount;
    throw_unless(47, actual_jetton_balance >= 0);
    slice new_jetton_data = begin_cell().store_coins(actual_jetton_balance).store_uint(coef, 8).end_cell().begin_parse();
    storage::jettons_data~udict_set(256, addr, new_jetton_data);
    (int addr, slice jetton_data, int flag) = custom_payload.udict_get_next?(256, addr);
  }

  int forward_ton_amount = in_msg_body~load_coins();
  throw_unless(708, slice_bits(in_msg_body) >= 1);
  slice either_forward_payload = in_msg_body;
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(to_wallet_address)
    .store_coins(0)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init);
  var msg_body = begin_cell()
    .store_uint(op::internal_transfer(), 32)
    .store_uint(query_id, 64)
    .store_coins(inaccurate_jetton_amount)
    .store_slice(storage::owner_addr)
    .store_slice(response_address)
    .store_coins(forward_ton_amount)
    .store_dict(custom_payload)
    .store_slice(either_forward_payload)
    .end_cell();

  msg = msg.store_ref(msg_body);
  int fwd_count = forward_ton_amount ? 2 : 1;
  throw_unless(709, msg_value >
                     forward_ton_amount +
    ;; 3 messages: wal1->wal2,  wal2->owner, wal2->response
    ;; but last one is optional (it is ok if it fails)
                     fwd_count * fwd_fee +
    (2 * gas_consumption() + min_tons_for_storage()));
  ;; universal message send fee calculation may be activated here
  ;; by using this instead of fwd_fee
  ;; msg_fwd_fee(to_wallet, msg_body, state_init, 15)

  send_raw_message(msg.end_cell(), 64); ;; revert on errors
  save_data();
}

() receive_tokens (slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
  
  load_data();
  int query_id = in_msg_body~load_uint(64);
  int inaccurate_jetton_amount = in_msg_body~load_coins();
  slice from_address = in_msg_body~load_msg_addr();
  slice response_address = in_msg_body~load_msg_addr();
  throw_unless(707,
    equal_slices(storage::fund_addr, sender_address)
      |
      equal_slices(calculate_user_jetton_wallet_address_2(from_address, storage::fund_addr, storage::jettons_data, storage::liquidity_manager_code), sender_address)
  );
  int forward_ton_amount = in_msg_body~load_coins();

  cell custom_payload = in_msg_body~load_dict();
  (int addr, slice jetton_data, int flag) = custom_payload.udict_get_min?(256);
  while (flag) {
    int jetton_amount = jetton_data~load_coins();
    (slice actual_jetton_data, int flag_1) = storage::jettons_data.udict_get?(256, addr);
    throw_unless(303, flag_1 != 0);
    int actual_jetton_balance = actual_jetton_data~load_coins();
    int coef = actual_jetton_data~load_uint(8);
    actual_jetton_balance += jetton_amount;
    slice new_jetton_data = begin_cell().store_coins(actual_jetton_balance).store_uint(coef, 8).end_cell().begin_parse();
    storage::jettons_data~udict_set(256, addr, new_jetton_data);
    (addr, jetton_data, flag) = custom_payload.udict_get_next?(256, addr);
  }

  int ton_balance_before_msg = my_ton_balance - msg_value;
  int storage_fee = min_tons_for_storage() - min(ton_balance_before_msg, min_tons_for_storage());
  msg_value -= (storage_fee + gas_consumption());
  if(forward_ton_amount) {
    msg_value -= (forward_ton_amount + fwd_fee);
    slice either_forward_payload = in_msg_body;

    var msg_body = begin_cell()
        .store_uint(op::transfer_notification(), 32)
        .store_uint(query_id, 64)
        .store_coins(inaccurate_jetton_amount)
        .store_slice(from_address)
        .store_dict(custom_payload)
        .store_slice(either_forward_payload)
        .end_cell();

    var msg = begin_cell()
      .store_uint(0x10, 6) ;; we should not bounce here cause receiver can have uninitialized contract
      .store_slice(storage::owner_addr)
      .store_coins(forward_ton_amount)
      .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_ref(msg_body);

    send_raw_message(msg.end_cell(), 1);
  }

  if ((response_address.preload_uint(2) != 0) & (msg_value > 0)) {
    var msg = begin_cell()
      .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
      .store_slice(response_address)
      .store_coins(msg_value)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(op::excesses(), 32)
      .store_uint(query_id, 64);
    send_raw_message(msg.end_cell(), 2);
  }

  save_data();
}

() burn_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
  
  load_data();
  int query_id = in_msg_body~load_uint(64);
  int inaccurate_jetton_amount = in_msg_body~load_coins();
  ;;slice response_address = in_msg_body~load_msg_addr();
  ;; ignore custom payload
  ;; slice custom_payload = in_msg_body~load_dict();

  throw_unless(705, equal_slices(storage::owner_addr, sender_address));

  throw_unless(707, msg_value > fwd_fee + 2 * gas_consumption());
  cell burn_amount = new_dict();

  if (inaccurate_jetton_amount > calculate_balance_lm(storage::jettons_data)) {
    burn_amount = storage::jettons_data;
    storage::jettons_data = empty_jettons_data(storage::jettons_data);
  }
  else {
    (int addr, slice jetton_data, int flag) = storage::jettons_data.udict_get_min?(256);
    while (flag) {
      int lp_amount = jetton_data~load_coins();
      int coef = jetton_data~load_uint(8);

      int new_lp_amount = lp_amount - inaccurate_jetton_amount;

      slice value = begin_cell().store_coins(inaccurate_jetton_amount).end_cell().begin_parse();
      burn_amount~udict_set(256, addr, value);
      value = begin_cell().store_coins(new_lp_amount).end_cell().begin_parse();
      storage::jettons_data~udict_set(256, addr, value);

      (addr, jetton_data, flag) = storage::jettons_data.udict_get_next?(256, addr);
    }
  }

  var msg_body = begin_cell()
      .store_uint(op::burn_notification(), 32)
      .store_uint(query_id, 64)
      .store_coins(inaccurate_jetton_amount)
      .store_slice(storage::owner_addr)
      .store_dict(burn_amount)
      .end_cell();

  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(storage::fund_addr)
    .store_coins(0)
    .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_ref(msg_body);

  send_raw_message(msg.end_cell(), 64);

  save_data();
}

() on_bounce (slice in_msg_body) impure {
  in_msg_body~skip_bits(32); ;; 0xFFFFFFFF
  load_data();
  int op = in_msg_body~load_uint(32);
  throw_unless(709, (op == op::internal_transfer()) | (op == op::burn_notification()));
  int query_id = in_msg_body~load_uint(64);
  int jetton_amount = in_msg_body~load_coins();
  save_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) {
    on_bounce(in_msg_body);
    return ();
  }
  slice sender_address = cs~load_msg_addr();
  cs~load_msg_addr(); ;; skip dst
  cs~load_coins(); ;; skip value
  cs~skip_bits(1); ;; skip extracurrency collection
  cs~load_coins(); ;; skip ihr_fee
  int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

  int op = in_msg_body~load_uint(32);

  if (op == op::transfer()) { ;; outgoing transfer
    send_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
    return ();
  }

  if (op == op::internal_transfer()) { ;; incoming transfer
    receive_tokens(in_msg_body, sender_address, my_balance, fwd_fee, msg_value);
    return ();
  }

  if (op == op::burn()) { ;; burn
    burn_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
    return ();
  }

  if (op == op::transfer_notification()) {
    return ();
  }

  if (op == op::excesses()) {
    return ();
  }

  throw(0xffff);
}

(int, slice, slice, cell) get_wallet_data() method_id {
  load_data();
  return (calculate_balance_lm(storage::jettons_data), storage::owner_addr, storage::fund_addr, storage::liquidity_manager_code);
}

