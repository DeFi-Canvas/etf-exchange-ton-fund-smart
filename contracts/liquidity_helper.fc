#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/messages.fc";


global slice storage::owner_addr;
global slice storage::fund_addr;
global cell storage::jettons_data;
global int storage::counter;

() load_data() impure {
  slice ds = get_data().begin_parse();
  storage::owner_addr = ds~load_msg_addr();
  storage::fund_addr = ds~load_msg_addr();
  storage::jettons_data = ds~load_dict();
  storage::counter = ds~load_uint(8);
}

() save_data() impure inline {
  set_data(
    begin_cell()
        .store_slice(storage::owner_addr)
        .store_slice(storage::fund_addr)
        .store_dict(storage::jettons_data)
        .store_uint(storage::counter, 8)
    .end_cell()
  );
}

int is_all_jettons_deposited(cell jettons_data) inline {
  int is_deposit_ready = true;
  (int addr, slice jetton_data, int flag) = jettons_data.udict_get_min?(256);
  while(flag) {
    (_, int is_deposited) = (jetton_data~load_coins(), jetton_data~load_int(1));
    if(~ is_deposited) {
      is_deposit_ready = false;
    }
    (addr, jetton_data, flag) = jettons_data.udict_get_next?(256, addr);
  }
  return is_deposit_ready;
}

cell get_default_data(cell jettons_data) inline {
  cell default_jettons_data = new_dict();
  slice empty_value = begin_cell().store_coins(0).store_int(false,1).end_cell().begin_parse();
  (int addr, _, int flag) = jettons_data.udict_get_min?(256);
  while(flag) {
    default_jettons_data~udict_set(256, addr, empty_value);
    (addr, _, flag) = jettons_data.udict_get_next?(256, addr);
  }
  return default_jettons_data;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) {
    return ();
  }
  slice sender_address = cs~load_msg_addr();
  
  load_data();

  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);
  if (op == op::excesses()) {
    return ();
  }
  throw_unless(0xffff, op == op::deposit_liquidity());
  throw_unless(111, equal_slices(storage::fund_addr, sender_address));
  slice jetton_wallet = in_msg_body~load_msg_addr();
  int jetton_amount = in_msg_body~load_coins();
  (int wc, int addr) = parse_std_addr(jetton_wallet);

  (slice current_jetton_data, int flag) = storage::jettons_data.udict_get?(256, addr);
  int current_jettons_amount = current_jetton_data~load_coins();
  slice value = begin_cell().store_coins(current_jettons_amount + jetton_amount).store_int(true, 1).end_cell().begin_parse();
  storage::jettons_data~udict_set(256, addr, value);

  int is_deposit_ready = is_all_jettons_deposited(storage::jettons_data);
  if(is_deposit_ready) {
    var msg = begin_cell()
        .store_uint(op::deposit_liquidity(), 32)
        .store_uint(query_id, 64)
        .store_slice(storage::owner_addr)
        .store_dict(storage::jettons_data)
        .end_cell();
    send_simple_message(0, storage::fund_addr, msg, 128);
    storage::jettons_data = get_default_data(storage::jettons_data);
  }
  save_data();
  return ();
}

;; (int, slice, slice, cell) get_wallet_data() method_id {
;;   return load_data();
;; }
