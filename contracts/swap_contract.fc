#include "imports/stdlib.fc";
#include "imports/op-codes.fc";


() swap_tokens(slice jetton_wallet, slice stonfi_jetton_wallet, int jetton_amount, int min_out, slice stonfi_router_addr) impure {

    var payload = begin_cell()
        .store_uint(0x25938561, 32)  
        .store_slice(stonfi_jetton_wallet) 
        .store_coins(min_out) 
        .store_slice(my_address()) 
        .store_uint(0, 1)
        .end_cell();

    var msg_body = begin_cell()
        .store_uint(0xf8a7ea5, 32) 
        .store_uint(0, 64) ;;queryId
        .store_coins(jetton_amount)   
        .store_slice(stonfi_router_addr)       
        .store_slice(my_address()) 
        .store_uint(0, 1)
        .store_coins(150000000)
        .store_maybe_ref(payload)         
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)   
        .store_slice(jetton_wallet)  
        .store_coins(250000000) ;; 0,25 ton     
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; Mode 3
        .store_ref(msg_body)
        .end_cell();
  
    send_raw_message(msg, 0); 
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice stonfi_router_addr = in_msg_body~load_msg_addr();
    slice jetton_wallet = in_msg_body~load_msg_addr();

    cell custom_payload = in_msg_body~load_dict();
    int min_out = in_msg_body~load_coins();
    cell forward_payload = in_msg_body~load_dict();
    slice payload_slice = forward_payload.begin_parse();
    slice stonfi_jetton_wallet = payload_slice~load_msg_addr();
    
    swap_tokens(jetton_wallet, stonfi_jetton_wallet, jetton_amount, min_out, stonfi_router_addr);
    
    return ();
}


